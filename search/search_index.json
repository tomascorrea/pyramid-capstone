{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"pyramid-capstone","text":"<p>FastAPI-like decorators for Pyramid - Build type-safe REST APIs with automatic validation, serialization, and OpenAPI documentation.</p>"},{"location":"#what-is-pyramid-capstone","title":"\u2728 What is pyramid-capstone?","text":"<p><code>pyramid-capstone</code> brings the developer experience of FastAPI to the Pyramid web framework. It allows you to write clean, type-safe API endpoints with automatic request validation, response serialization, and OpenAPI documentation generation.</p>"},{"location":"#key-features","title":"\ud83c\udfaf Key Features","text":"<ul> <li>\ud83d\udd12 Type Safety: Full type hint support with automatic validation</li> <li>\u26a1 Zero Boilerplate: Minimal code, maximum functionality  </li> <li>\ud83d\udd17 Pyramid Integration: Works seamlessly with existing Pyramid applications</li> <li>\ud83d\udcda Auto Documentation: Automatic OpenAPI/Swagger documentation</li> <li>\ud83d\udee1\ufe0f Security Ready: Built-in support for Pyramid's security system</li> <li>\ud83e\uddea Well Tested: Comprehensive test suite with high coverage</li> </ul>"},{"location":"#quick-example","title":"\ud83d\ude80 Quick Example","text":"<pre><code>from pyramid.config import Configurator\nfrom pyramid_capstone import th_api\n\n@th_api.get('/users/{user_id}')\ndef get_user(request, user_id: int) -&gt; dict:\n    return {\"id\": user_id, \"name\": \"John Doe\"}\n\n@th_api.post('/users')  \ndef create_user(request, name: str, email: str) -&gt; dict:\n    # Parameters automatically extracted and validated from JSON body\n    return {\"message\": \"User created\", \"name\": name, \"email\": email}\n\n# Pyramid app setup\ndef main(global_config, **settings):\n    config = Configurator(settings=settings)\n    config.include('pyramid_capstone')\n    config.scan()\n    return config.make_wsgi_app()\n</code></pre> <p>That's it! No manual schema definitions, no boilerplate validation code.</p>"},{"location":"#getting-started","title":"\ud83c\udfc3\u200d\u2642\ufe0f Getting Started","text":"<p>Ready to start building type-safe APIs? Check out our Getting Started Guide for installation instructions and your first API endpoint.</p>"},{"location":"#documentation","title":"\ud83d\udcda Documentation","text":"<ul> <li>Getting Started - Installation and basic setup</li> <li>Tutorial - Step-by-step guide with examples</li> <li>Security - Authentication and authorization</li> <li>API Reference - Complete API documentation</li> <li>Examples - Real-world examples and patterns</li> </ul>"},{"location":"#why-choose-pyramid-capstone","title":"\ud83c\udfaf Why Choose pyramid-capstone?","text":"Feature pyramid-capstone Pure Pyramid Pure Cornice Type Safety \u2705 Built-in \u274c Manual \u274c Manual Auto Validation \u2705 Automatic \u274c Manual \u26a0\ufe0f Schema required OpenAPI Docs \u2705 Generated \u274c Manual \u26a0\ufe0f Limited Boilerplate \u2705 Minimal \u274c Verbose \u26a0\ufe0f Medium Learning Curve \u2705 Gentle \u26a0\ufe0f Steep \u26a0\ufe0f Medium"},{"location":"#contributing","title":"\ud83e\udd1d Contributing","text":"<p>We welcome contributions! Please see our Contributing Guide for details.</p>"},{"location":"#license","title":"\ud83d\udcc4 License","text":"<p>This project is licensed under the MIT License - see the LICENSE file for details.</p>"},{"location":"examples/","title":"Examples","text":"<p>This page showcases real-world examples and patterns using <code>pyramid-capstone</code>.</p>"},{"location":"examples/#complete-blog-api-example","title":"Complete Blog API Example","text":"<p>The repository includes a comprehensive Blog API example that demonstrates:</p> <ul> <li>CRUD operations for users, posts, comments, and categories</li> <li>Complex parameter handling with filtering and pagination</li> <li>Nested relationships between entities</li> <li>Error handling with proper HTTP status codes</li> <li>OpenAPI documentation with Swagger UI</li> </ul>"},{"location":"examples/#running-the-blog-example","title":"Running the Blog Example","text":"<pre><code># Clone the repository\ngit clone https://github.com/tomas_correa/pyramid-capstone.git\ncd pyramid-capstone\n\n# Install dependencies\npoetry install --with dev\n\n# Run the blog API\ncd examples/blog_api\npserve development.ini\n\n# Visit http://localhost:6543 for API documentation\n# Visit http://localhost:6543/swagger-ui/ for interactive docs\n</code></pre>"},{"location":"examples/#common-patterns","title":"Common Patterns","text":""},{"location":"examples/#1-simple-crud-operations","title":"1. Simple CRUD Operations","text":"<pre><code>from pyramid_capstone import th_api\nfrom typing import List, Optional\n\n# In-memory storage for demo\nbooks = {}\nnext_id = 1\n\n@th_api.get('/books')\ndef list_books(request, \n               author: Optional[str] = None,\n               genre: Optional[str] = None,\n               page: int = 1,\n               per_page: int = 10) -&gt; dict:\n    \"\"\"List books with optional filtering and pagination.\"\"\"\n    filtered_books = list(books.values())\n\n    # Apply filters\n    if author:\n        filtered_books = [b for b in filtered_books if author.lower() in b['author'].lower()]\n    if genre:\n        filtered_books = [b for b in filtered_books if b['genre'].lower() == genre.lower()]\n\n    # Pagination\n    total = len(filtered_books)\n    start = (page - 1) * per_page\n    end = start + per_page\n    page_books = filtered_books[start:end]\n\n    return {\n        \"books\": page_books,\n        \"pagination\": {\n            \"page\": page,\n            \"per_page\": per_page,\n            \"total\": total,\n            \"has_next\": end &lt; total,\n            \"has_prev\": page &gt; 1\n        }\n    }\n\n@th_api.get('/books/{book_id}')\ndef get_book(request, book_id: int) -&gt; dict:\n    \"\"\"Get a specific book by ID.\"\"\"\n    book = books.get(book_id)\n    if not book:\n        request.response.status = 404\n        return {\"error\": \"Book not found\"}\n    return book\n\n@th_api.post('/books')\ndef create_book(request, \n                title: str, \n                author: str, \n                genre: str,\n                isbn: Optional[str] = None,\n                pages: Optional[int] = None) -&gt; dict:\n    \"\"\"Create a new book.\"\"\"\n    global next_id\n\n    # Validation\n    if len(title.strip()) &lt; 1:\n        request.response.status = 400\n        return {\"error\": \"Title is required\"}\n\n    if len(author.strip()) &lt; 1:\n        request.response.status = 400\n        return {\"error\": \"Author is required\"}\n\n    book = {\n        \"id\": next_id,\n        \"title\": title.strip(),\n        \"author\": author.strip(),\n        \"genre\": genre.strip(),\n        \"isbn\": isbn,\n        \"pages\": pages,\n        \"created_at\": datetime.now().isoformat()\n    }\n\n    books[next_id] = book\n    next_id += 1\n\n    request.response.status = 201\n    return book\n\n@th_api.put('/books/{book_id}')\ndef update_book(request, \n                book_id: int,\n                title: Optional[str] = None,\n                author: Optional[str] = None,\n                genre: Optional[str] = None,\n                isbn: Optional[str] = None,\n                pages: Optional[int] = None) -&gt; dict:\n    \"\"\"Update an existing book.\"\"\"\n    book = books.get(book_id)\n    if not book:\n        request.response.status = 404\n        return {\"error\": \"Book not found\"}\n\n    # Update provided fields\n    if title is not None:\n        book[\"title\"] = title.strip()\n    if author is not None:\n        book[\"author\"] = author.strip()\n    if genre is not None:\n        book[\"genre\"] = genre.strip()\n    if isbn is not None:\n        book[\"isbn\"] = isbn\n    if pages is not None:\n        book[\"pages\"] = pages\n\n    book[\"updated_at\"] = datetime.now().isoformat()\n    return book\n\n@th_api.delete('/books/{book_id}')\ndef delete_book(request, book_id: int) -&gt; dict:\n    \"\"\"Delete a book.\"\"\"\n    if book_id not in books:\n        request.response.status = 404\n        return {\"error\": \"Book not found\"}\n\n    del books[book_id]\n    return {\"message\": \"Book deleted successfully\"}\n</code></pre>"},{"location":"examples/#2-file-upload-handling","title":"2. File Upload Handling","text":"<pre><code>import os\nimport uuid\nfrom pyramid_capstone import th_api\n\nUPLOAD_DIR = \"/tmp/uploads\"\nos.makedirs(UPLOAD_DIR, exist_ok=True)\n\n@th_api.post('/upload')\ndef upload_file(request, description: Optional[str] = None) -&gt; dict:\n    \"\"\"Upload a file with optional description.\"\"\"\n\n    # Get uploaded file from request\n    if 'file' not in request.POST:\n        request.response.status = 400\n        return {\"error\": \"No file provided\"}\n\n    upload = request.POST['file']\n\n    # Validate file\n    if not hasattr(upload, 'filename') or not upload.filename:\n        request.response.status = 400\n        return {\"error\": \"Invalid file\"}\n\n    # Check file size (limit to 10MB)\n    if hasattr(upload, 'file'):\n        upload.file.seek(0, 2)  # Seek to end\n        size = upload.file.tell()\n        upload.file.seek(0)  # Reset to beginning\n\n        if size &gt; 10 * 1024 * 1024:  # 10MB\n            request.response.status = 400\n            return {\"error\": \"File too large (max 10MB)\"}\n\n    # Generate unique filename\n    file_id = str(uuid.uuid4())\n    file_ext = os.path.splitext(upload.filename)[1]\n    filename = f\"{file_id}{file_ext}\"\n    filepath = os.path.join(UPLOAD_DIR, filename)\n\n    # Save file\n    with open(filepath, 'wb') as f:\n        f.write(upload.file.read())\n\n    # Store file metadata\n    file_info = {\n        \"id\": file_id,\n        \"original_name\": upload.filename,\n        \"filename\": filename,\n        \"size\": os.path.getsize(filepath),\n        \"description\": description,\n        \"uploaded_at\": datetime.now().isoformat()\n    }\n\n    request.response.status = 201\n    return file_info\n\n@th_api.get('/files/{file_id}')\ndef download_file(request, file_id: str) -&gt; dict:\n    \"\"\"Download a file by ID.\"\"\"\n    # In a real app, you'd look up file metadata from database\n    filename = f\"{file_id}.jpg\"  # Simplified for example\n    filepath = os.path.join(UPLOAD_DIR, filename)\n\n    if not os.path.exists(filepath):\n        request.response.status = 404\n        return {\"error\": \"File not found\"}\n\n    # Set response headers for file download\n    request.response.content_type = 'application/octet-stream'\n    request.response.headers['Content-Disposition'] = f'attachment; filename=\"{filename}\"'\n\n    # Return file content\n    with open(filepath, 'rb') as f:\n        request.response.body = f.read()\n\n    return request.response\n</code></pre>"},{"location":"examples/#3-complex-data-validation","title":"3. Complex Data Validation","text":"<pre><code>from dataclasses import dataclass\nfrom typing import List, Optional\nfrom datetime import datetime, date\nimport re\n\n@dataclass\nclass Address:\n    street: str\n    city: str\n    state: str\n    zip_code: str\n    country: str = \"US\"\n\n@dataclass\nclass ContactInfo:\n    email: str\n    phone: Optional[str] = None\n    address: Optional[Address] = None\n\n@dataclass\nclass Person:\n    first_name: str\n    last_name: str\n    birth_date: date\n    contact: ContactInfo\n\n# Validation functions\ndef validate_email(email: str) -&gt; str:\n    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'\n    if not re.match(pattern, email):\n        raise ValueError(\"Invalid email format\")\n    return email.lower()\n\ndef validate_phone(phone: str) -&gt; str:\n    # Remove all non-digits\n    digits = re.sub(r'\\D', '', phone)\n    if len(digits) != 10:\n        raise ValueError(\"Phone number must be 10 digits\")\n    return f\"({digits[:3]}) {digits[3:6]}-{digits[6:]}\"\n\ndef validate_zip_code(zip_code: str) -&gt; str:\n    if not re.match(r'^\\d{5}(-\\d{4})?$', zip_code):\n        raise ValueError(\"Invalid ZIP code format\")\n    return zip_code\n\n@th_api.post('/people')\ndef create_person(request,\n                  first_name: str,\n                  last_name: str,\n                  birth_date: str,\n                  email: str,\n                  phone: Optional[str] = None,\n                  street: Optional[str] = None,\n                  city: Optional[str] = None,\n                  state: Optional[str] = None,\n                  zip_code: Optional[str] = None) -&gt; dict:\n    \"\"\"Create a person with complex validation.\"\"\"\n\n    errors = {}\n\n    # Validate names\n    if len(first_name.strip()) &lt; 2:\n        errors['first_name'] = 'First name must be at least 2 characters'\n\n    if len(last_name.strip()) &lt; 2:\n        errors['last_name'] = 'Last name must be at least 2 characters'\n\n    # Validate birth date\n    try:\n        birth_date_obj = datetime.fromisoformat(birth_date).date()\n        if birth_date_obj &gt; date.today():\n            errors['birth_date'] = 'Birth date cannot be in the future'\n        if birth_date_obj &lt; date(1900, 1, 1):\n            errors['birth_date'] = 'Birth date cannot be before 1900'\n    except ValueError:\n        errors['birth_date'] = 'Invalid date format (use YYYY-MM-DD)'\n        birth_date_obj = None\n\n    # Validate email\n    try:\n        email = validate_email(email)\n    except ValueError as e:\n        errors['email'] = str(e)\n\n    # Validate phone if provided\n    if phone:\n        try:\n            phone = validate_phone(phone)\n        except ValueError as e:\n            errors['phone'] = str(e)\n\n    # Validate address if provided\n    address = None\n    if any([street, city, state, zip_code]):\n        # If any address field is provided, all required fields must be present\n        if not all([street, city, state, zip_code]):\n            errors['address'] = 'All address fields (street, city, state, zip_code) are required'\n        else:\n            try:\n                zip_code = validate_zip_code(zip_code)\n                address = Address(\n                    street=street.strip(),\n                    city=city.strip(),\n                    state=state.strip().upper(),\n                    zip_code=zip_code\n                )\n            except ValueError as e:\n                errors['zip_code'] = str(e)\n\n    # Return validation errors\n    if errors:\n        request.response.status = 400\n        return {\"error\": \"Validation failed\", \"details\": errors}\n\n    # Create person object\n    contact = ContactInfo(\n        email=email,\n        phone=phone,\n        address=address\n    )\n\n    person = Person(\n        first_name=first_name.strip(),\n        last_name=last_name.strip(),\n        birth_date=birth_date_obj,\n        contact=contact\n    )\n\n    # In a real app, save to database here\n    person_dict = {\n        \"id\": str(uuid.uuid4()),\n        \"first_name\": person.first_name,\n        \"last_name\": person.last_name,\n        \"birth_date\": person.birth_date.isoformat(),\n        \"contact\": {\n            \"email\": person.contact.email,\n            \"phone\": person.contact.phone,\n            \"address\": {\n                \"street\": person.contact.address.street,\n                \"city\": person.contact.address.city,\n                \"state\": person.contact.address.state,\n                \"zip_code\": person.contact.address.zip_code,\n                \"country\": person.contact.address.country\n            } if person.contact.address else None\n        },\n        \"created_at\": datetime.now().isoformat()\n    }\n\n    request.response.status = 201\n    return person_dict\n</code></pre>"},{"location":"examples/#4-async-operations-with-background-tasks","title":"4. Async Operations with Background Tasks","text":"<pre><code>import asyncio\nfrom concurrent.futures import ThreadPoolExecutor\nfrom pyramid_capstone import th_api\n\n# Thread pool for background tasks\nexecutor = ThreadPoolExecutor(max_workers=4)\n\n# Task storage (use Redis or database in production)\ntasks = {}\n\ndef long_running_task(task_id: str, data: dict) -&gt; dict:\n    \"\"\"Simulate a long-running task.\"\"\"\n    import time\n\n    # Update task status\n    tasks[task_id][\"status\"] = \"processing\"\n    tasks[task_id][\"progress\"] = 0\n\n    # Simulate work with progress updates\n    for i in range(10):\n        time.sleep(1)  # Simulate work\n        tasks[task_id][\"progress\"] = (i + 1) * 10\n\n    # Complete task\n    tasks[task_id][\"status\"] = \"completed\"\n    tasks[task_id][\"result\"] = {\n        \"processed_data\": f\"Processed: {data}\",\n        \"completed_at\": datetime.now().isoformat()\n    }\n\n    return tasks[task_id][\"result\"]\n\n@th_api.post('/tasks')\ndef create_task(request, task_type: str, data: dict) -&gt; dict:\n    \"\"\"Create a background task.\"\"\"\n\n    if task_type not in [\"data_processing\", \"report_generation\"]:\n        request.response.status = 400\n        return {\"error\": \"Invalid task type\"}\n\n    task_id = str(uuid.uuid4())\n\n    # Initialize task\n    tasks[task_id] = {\n        \"id\": task_id,\n        \"type\": task_type,\n        \"status\": \"queued\",\n        \"progress\": 0,\n        \"created_at\": datetime.now().isoformat(),\n        \"result\": None\n    }\n\n    # Submit task to thread pool\n    future = executor.submit(long_running_task, task_id, data)\n    tasks[task_id][\"future\"] = future\n\n    request.response.status = 202  # Accepted\n    return {\n        \"task_id\": task_id,\n        \"status\": \"queued\",\n        \"status_url\": f\"/tasks/{task_id}\"\n    }\n\n@th_api.get('/tasks/{task_id}')\ndef get_task_status(request, task_id: str) -&gt; dict:\n    \"\"\"Get task status and result.\"\"\"\n\n    task = tasks.get(task_id)\n    if not task:\n        request.response.status = 404\n        return {\"error\": \"Task not found\"}\n\n    # Check if task is done\n    if \"future\" in task and task[\"future\"].done():\n        try:\n            result = task[\"future\"].result()\n            task[\"status\"] = \"completed\"\n            task[\"result\"] = result\n        except Exception as e:\n            task[\"status\"] = \"failed\"\n            task[\"error\"] = str(e)\n\n        # Clean up future reference\n        del task[\"future\"]\n\n    # Return task info (excluding future object)\n    return {\n        \"id\": task[\"id\"],\n        \"type\": task[\"type\"],\n        \"status\": task[\"status\"],\n        \"progress\": task[\"progress\"],\n        \"created_at\": task[\"created_at\"],\n        \"result\": task.get(\"result\"),\n        \"error\": task.get(\"error\")\n    }\n\n@th_api.get('/tasks')\ndef list_tasks(request, status: Optional[str] = None) -&gt; dict:\n    \"\"\"List all tasks with optional status filter.\"\"\"\n\n    filtered_tasks = []\n    for task in tasks.values():\n        # Skip future object in response\n        task_info = {k: v for k, v in task.items() if k != \"future\"}\n\n        if status is None or task_info[\"status\"] == status:\n            filtered_tasks.append(task_info)\n\n    return {\"tasks\": filtered_tasks}\n</code></pre>"},{"location":"examples/#5-websocket-integration","title":"5. WebSocket Integration","text":"<pre><code>from pyramid_capstone import th_api\nimport json\n\n# WebSocket connections storage\nwebsocket_connections = set()\n\n@th_api.post('/notifications')\ndef send_notification(request, message: str, notification_type: str = \"info\") -&gt; dict:\n    \"\"\"Send notification to all connected WebSocket clients.\"\"\"\n\n    notification = {\n        \"type\": notification_type,\n        \"message\": message,\n        \"timestamp\": datetime.now().isoformat()\n    }\n\n    # Send to all connected WebSocket clients\n    disconnected = set()\n    for ws in websocket_connections:\n        try:\n            ws.send(json.dumps(notification))\n        except:\n            # Connection is closed, mark for removal\n            disconnected.add(ws)\n\n    # Remove disconnected clients\n    websocket_connections -= disconnected\n\n    return {\n        \"message\": \"Notification sent\",\n        \"recipients\": len(websocket_connections),\n        \"notification\": notification\n    }\n\n@th_api.get('/notifications/stats')\ndef get_notification_stats(request) -&gt; dict:\n    \"\"\"Get notification system statistics.\"\"\"\n    return {\n        \"connected_clients\": len(websocket_connections),\n        \"server_time\": datetime.now().isoformat()\n    }\n\n# WebSocket handler (separate from th_api decorators)\ndef websocket_view(request):\n    \"\"\"Handle WebSocket connections.\"\"\"\n    ws = request.environ.get('wsgi.websocket')\n    if not ws:\n        request.response.status = 400\n        return {\"error\": \"WebSocket connection required\"}\n\n    # Add to connections\n    websocket_connections.add(ws)\n\n    try:\n        # Send welcome message\n        welcome = {\n            \"type\": \"welcome\",\n            \"message\": \"Connected to notification service\",\n            \"timestamp\": datetime.now().isoformat()\n        }\n        ws.send(json.dumps(welcome))\n\n        # Keep connection alive\n        while True:\n            message = ws.receive()\n            if message is None:\n                break\n\n            # Echo received messages (for testing)\n            echo = {\n                \"type\": \"echo\",\n                \"message\": f\"Received: {message}\",\n                \"timestamp\": datetime.now().isoformat()\n            }\n            ws.send(json.dumps(echo))\n\n    except Exception as e:\n        print(f\"WebSocket error: {e}\")\n\n    finally:\n        # Remove from connections\n        websocket_connections.discard(ws)\n\n    return {}\n</code></pre>"},{"location":"examples/#6-api-versioning","title":"6. API Versioning","text":"<pre><code>from pyramid_capstone import th_api\n\n# Version 1 API\n@th_api.get('/v1/users/{user_id}')\ndef get_user_v1(request, user_id: int) -&gt; dict:\n    \"\"\"Get user (v1 format).\"\"\"\n    user = get_user_from_db(user_id)\n    if not user:\n        request.response.status = 404\n        return {\"error\": \"User not found\"}\n\n    # V1 format - simple structure\n    return {\n        \"id\": user.id,\n        \"name\": user.username,\n        \"email\": user.email\n    }\n\n# Version 2 API\n@th_api.get('/v2/users/{user_id}')\ndef get_user_v2(request, user_id: int, include_profile: bool = False) -&gt; dict:\n    \"\"\"Get user (v2 format with enhanced features).\"\"\"\n    user = get_user_from_db(user_id)\n    if not user:\n        request.response.status = 404\n        return {\"error\": \"User not found\"}\n\n    # V2 format - enhanced structure\n    result = {\n        \"id\": user.id,\n        \"username\": user.username,\n        \"email\": user.email,\n        \"created_at\": user.created_at.isoformat(),\n        \"is_active\": user.is_active,\n        \"metadata\": {\n            \"version\": \"2.0\",\n            \"last_updated\": user.updated_at.isoformat()\n        }\n    }\n\n    # Optional profile inclusion\n    if include_profile and user.profile:\n        result[\"profile\"] = {\n            \"bio\": user.profile.bio,\n            \"avatar_url\": user.profile.avatar_url,\n            \"location\": user.profile.location\n        }\n\n    return result\n\n# Version negotiation through headers\n@th_api.get('/users/{user_id}')\ndef get_user_versioned(request, user_id: int) -&gt; dict:\n    \"\"\"Get user with version negotiation.\"\"\"\n\n    # Check Accept header for version\n    accept_header = request.headers.get('Accept', '')\n\n    if 'application/vnd.api.v2+json' in accept_header:\n        return get_user_v2(request, user_id)\n    else:\n        # Default to v1\n        return get_user_v1(request, user_id)\n</code></pre>"},{"location":"examples/#integration-examples","title":"Integration Examples","text":""},{"location":"examples/#sqlalchemy-integration","title":"SQLAlchemy Integration","text":"<pre><code>from sqlalchemy import Column, Integer, String, DateTime, Boolean, ForeignKey\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import relationship, sessionmaker\nfrom pyramid_capstone import th_api\n\nBase = declarative_base()\n\nclass User(Base):\n    __tablename__ = 'users'\n\n    id = Column(Integer, primary_key=True)\n    username = Column(String(50), unique=True, nullable=False)\n    email = Column(String(255), unique=True, nullable=False)\n    created_at = Column(DateTime, default=datetime.utcnow)\n    is_active = Column(Boolean, default=True)\n\n    posts = relationship(\"Post\", back_populates=\"author\")\n\nclass Post(Base):\n    __tablename__ = 'posts'\n\n    id = Column(Integer, primary_key=True)\n    title = Column(String(200), nullable=False)\n    content = Column(String, nullable=False)\n    author_id = Column(Integer, ForeignKey('users.id'))\n    created_at = Column(DateTime, default=datetime.utcnow)\n\n    author = relationship(\"User\", back_populates=\"posts\")\n\n@th_api.get('/users/{user_id}/posts')\ndef get_user_posts(request, user_id: int, page: int = 1, per_page: int = 10) -&gt; dict:\n    \"\"\"Get user posts with SQLAlchemy.\"\"\"\n\n    # Query with eager loading to avoid N+1 queries\n    posts_query = (request.dbsession.query(Post)\n                   .filter_by(author_id=user_id)\n                   .order_by(Post.created_at.desc()))\n\n    # Get total count\n    total = posts_query.count()\n\n    # Apply pagination\n    posts = (posts_query\n             .offset((page - 1) * per_page)\n             .limit(per_page)\n             .all())\n\n    return {\n        \"posts\": [\n            {\n                \"id\": post.id,\n                \"title\": post.title,\n                \"content\": post.content[:200] + \"...\" if len(post.content) &gt; 200 else post.content,\n                \"created_at\": post.created_at.isoformat()\n            }\n            for post in posts\n        ],\n        \"pagination\": {\n            \"page\": page,\n            \"per_page\": per_page,\n            \"total\": total,\n            \"has_next\": (page * per_page) &lt; total,\n            \"has_prev\": page &gt; 1\n        }\n    }\n</code></pre> <p>These examples demonstrate the flexibility and power of <code>pyramid-capstone</code> for building various types of APIs. Each pattern can be adapted and combined to meet your specific requirements.</p> <p>For more comprehensive examples, check out the Blog API example in the repository.</p>"},{"location":"getting-started/","title":"Getting Started","text":"<p>This guide will help you get up and running with <code>pyramid-capstone</code> in just a few minutes.</p>"},{"location":"getting-started/#installation","title":"Installation","text":"<p>Install the package using pip:</p> <pre><code>poetry add pyramid-capstone\n</code></pre> <p>Or if you're using pip:</p> <pre><code>pip install pyramid-capstone\n</code></pre>"},{"location":"getting-started/#requirements","title":"Requirements","text":"<ul> <li>Python 3.8+</li> <li>Pyramid 2.0+</li> <li>Cornice (automatically installed as a dependency)</li> </ul>"},{"location":"getting-started/#your-first-api","title":"Your First API","text":"<p>Let's create a simple API to demonstrate the basic concepts.</p>"},{"location":"getting-started/#1-create-a-basic-pyramid-application","title":"1. Create a Basic Pyramid Application","text":"<p>Create a file called <code>app.py</code>:</p> <pre><code>from pyramid.config import Configurator\nfrom pyramid_capstone import th_api\n\n# Your API endpoints\n@th_api.get('/hello')\ndef hello_world(request) -&gt; dict:\n    \"\"\"A simple hello world endpoint.\"\"\"\n    return {\"message\": \"Hello, World!\"}\n\n@th_api.get('/hello/{name}')\ndef hello_name(request, name: str) -&gt; dict:\n    \"\"\"Greet someone by name.\"\"\"\n    return {\"message\": f\"Hello, {name}!\"}\n\n@th_api.post('/users')\ndef create_user(request, name: str, email: str, age: int = 25) -&gt; dict:\n    \"\"\"Create a new user with automatic validation.\"\"\"\n    return {\n        \"message\": \"User created successfully\",\n        \"user\": {\n            \"name\": name,\n            \"email\": email, \n            \"age\": age\n        }\n    }\n\n# Application setup\ndef main(global_config, **settings):\n    \"\"\"Create and configure the Pyramid application.\"\"\"\n    config = Configurator(settings=settings)\n\n    # Include pyramid-capstone\n    config.include('pyramid_capstone')\n\n    # Scan for decorated views\n    config.scan()\n\n    return config.make_wsgi_app()\n\nif __name__ == '__main__':\n    from wsgiref.simple_server import make_server\n    app = main({})\n    server = make_server('0.0.0.0', 6543, app)\n    print(\"Server running on http://localhost:6543\")\n    server.serve_forever()\n</code></pre>"},{"location":"getting-started/#2-run-your-application","title":"2. Run Your Application","text":"<pre><code>python app.py\n</code></pre> <p>Your API is now running on <code>http://localhost:6543</code>!</p>"},{"location":"getting-started/#3-test-your-endpoints","title":"3. Test Your Endpoints","text":"<p>Try these requests:</p> <pre><code># Simple GET request\ncurl http://localhost:6543/hello\n\n# GET with path parameter\ncurl http://localhost:6543/hello/Alice\n\n# POST with JSON body (automatic validation)\ncurl -X POST http://localhost:6543/users \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"name\": \"John\", \"email\": \"john@example.com\", \"age\": 30}'\n\n# POST with missing optional parameter (uses default)\ncurl -X POST http://localhost:6543/users \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"name\": \"Jane\", \"email\": \"jane@example.com\"}'\n</code></pre>"},{"location":"getting-started/#what-just-happened","title":"What Just Happened?","text":"<p>Let's break down what <code>pyramid-capstone</code> did for you:</p>"},{"location":"getting-started/#automatic-parameter-extraction","title":"\ud83d\udd0d Automatic Parameter Extraction","text":"<pre><code>@th_api.get('/hello/{name}')\ndef hello_name(request, name: str) -&gt; dict:\n    # name is automatically extracted from the URL path\n    # and validated as a string\n</code></pre>"},{"location":"getting-started/#request-validation","title":"\u2705 Request Validation","text":"<pre><code>@th_api.post('/users')\ndef create_user(request, name: str, email: str, age: int = 25) -&gt; dict:\n    # Parameters are automatically extracted from JSON body\n    # name and email are required (will return 400 if missing)\n    # age is optional with default value 25\n    # age will be validated as integer (400 if not a number)\n</code></pre>"},{"location":"getting-started/#response-serialization","title":"\ud83d\udcdd Response Serialization","text":"<pre><code>def hello_world(request) -&gt; dict:\n    return {\"message\": \"Hello, World!\"}\n    # Return value is automatically serialized to JSON\n    # Content-Type header is set to application/json\n</code></pre>"},{"location":"getting-started/#configuration-options","title":"Configuration Options","text":""},{"location":"getting-started/#using-with-an-ini-file","title":"Using with an INI File","text":"<p>For production applications, you'll typically use an INI configuration file:</p> <p>Create <code>development.ini</code>:</p> <pre><code>[app:main]\nuse = egg:your_app\n\npyramid.reload_templates = true\npyramid.debug_authorization = false\npyramid.debug_notfound = false\npyramid.debug_routematch = false\npyramid.default_locale_name = en\n\n[server:main]\nuse = egg:waitress#main\nlisten = localhost:6543\n\n[loggers]\nkeys = root, your_app\n\n[handlers]\nkeys = console\n\n[formatters]\nkeys = generic\n\n[logger_root]\nlevel = INFO\nhandlers = console\n\n[logger_your_app]\nlevel = DEBUG\nhandlers =\nqualname = your_app\n\n[handler_console]\nclass = StreamHandler\nargs = (sys.stderr,)\nlevel = NOTSET\nformatter = generic\n\n[formatter_generic]\nformat = %(asctime)s %(levelname)-5.5s [%(name)s:%(lineno)s][%(funcName)s()] %(message)s\n</code></pre> <p>Then run with:</p> <pre><code>pserve development.ini\n</code></pre>"},{"location":"getting-started/#integration-with-existing-pyramid-apps","title":"Integration with Existing Pyramid Apps","text":"<p>If you have an existing Pyramid application, integration is simple:</p> <pre><code>def main(global_config, **settings):\n    config = Configurator(settings=settings)\n\n    # Your existing configuration\n    config.include('pyramid_jinja2')\n    config.add_static_view('static', 'static', cache_max_age=3600)\n\n    # Add pyramid-capstone\n    config.include('pyramid_capstone')\n\n    # Scan for both regular views and th_api decorated views\n    config.scan()\n\n    return config.make_wsgi_app()\n</code></pre>"},{"location":"getting-started/#next-steps","title":"Next Steps","text":"<p>Now that you have a basic API running, you might want to:</p> <ul> <li>Follow the Tutorial - Learn more advanced features with a complete example</li> <li>Add Security - Protect your endpoints with authentication</li> <li>See Examples - Explore real-world patterns and use cases</li> </ul>"},{"location":"getting-started/#common-issues","title":"Common Issues","text":""},{"location":"getting-started/#import-errors","title":"Import Errors","text":"<p>If you get import errors, make sure you have all dependencies installed:</p> <pre><code>poetry add pyramid cornice marshmallow\n</code></pre> <p>Or with pip:</p> <pre><code>pip install pyramid cornice marshmallow\n</code></pre>"},{"location":"getting-started/#scanning-issues","title":"Scanning Issues","text":"<p>If your decorated functions aren't being found, make sure:</p> <ol> <li>You're calling <code>config.scan()</code> after including the library</li> <li>Your decorated functions are in modules that get imported</li> <li>You're not defining functions inside other functions</li> </ol>"},{"location":"getting-started/#type-validation-errors","title":"Type Validation Errors","text":"<p>If you're getting unexpected validation errors:</p> <ol> <li>Check that your type hints match the expected data types</li> <li>Remember that URL path parameters are always strings initially</li> <li>JSON numbers become <code>int</code> or <code>float</code> based on your type hints</li> </ol> <p>Need help? Check out our examples or open an issue on GitHub!</p>"},{"location":"modules/","title":"API Reference","text":""},{"location":"modules/#pyramid_capstone","title":"<code>pyramid_capstone</code>","text":"<p>Pyramid Capstone</p> <p>A FastAPI-like decorator system for Pyramid that automatically handles validation and serialization using Marshmallow schemas and Cornice services.</p> Usage <p>from pyramid_capstone import th_api</p> <p>@th_api.get('/users/{user_id}') def get_user(request, user_id: int) -&gt; UserResponse:     return UserResponse(id=user_id, name=\"John\")</p>"},{"location":"modules/#pyramid_capstone.ParameterConflictError","title":"<code>ParameterConflictError</code>","text":"<p>               Bases: <code>TypeHintedAPIError</code></p> <p>Raised when there are conflicting parameter names between different sources.</p> <p>This typically occurs during setup when the same parameter name appears in multiple places (e.g., both path and query parameters).</p>"},{"location":"modules/#pyramid_capstone.ParameterMissingError","title":"<code>ParameterMissingError</code>","text":"<p>               Bases: <code>TypeHintedAPIError</code></p> <p>Raised when a required parameter is missing from the request.</p> <p>This occurs at runtime when a function requires a parameter that is not provided in the request.</p>"},{"location":"modules/#pyramid_capstone.SchemaGenerationError","title":"<code>SchemaGenerationError</code>","text":"<p>               Bases: <code>TypeHintedAPIError</code></p> <p>Raised when automatic schema generation fails.</p> <p>This can occur when type hints are not supported or when there are issues converting types to Marshmallow fields.</p>"},{"location":"modules/#pyramid_capstone.ServiceRegistrationError","title":"<code>ServiceRegistrationError</code>","text":"<p>               Bases: <code>TypeHintedAPIError</code></p> <p>Raised when there are issues registering a Cornice service.</p> <p>This typically occurs during setup when the service configuration is invalid or conflicts with existing services.</p>"},{"location":"modules/#pyramid_capstone.TypeHintedAPIError","title":"<code>TypeHintedAPIError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Base exception for all type-hinted API errors.</p>"},{"location":"modules/#pyramid_capstone.includeme","title":"<code>includeme(config)</code>","text":"<p>Pyramid includeme function for pyramid-capstone.</p> <p>This function is called when the library is included via config.include(). It sets up any necessary configuration for the library.</p> Source code in <code>pyramid_capstone/__init__.py</code> <pre><code>def includeme(config):\n    \"\"\"\n    Pyramid includeme function for pyramid-capstone.\n\n    This function is called when the library is included via config.include().\n    It sets up any necessary configuration for the library.\n    \"\"\"\n    # Ensure Cornice is included\n    config.include(\"cornice\")\n</code></pre>"},{"location":"security/","title":"Security Integration","text":"<p><code>pyramid-capstone</code> integrates seamlessly with Pyramid's powerful security system, allowing you to protect your API endpoints with authentication and authorization.</p>"},{"location":"security/#quick-start","title":"Quick Start","text":"<p>Add the <code>permission</code> parameter to any endpoint decorator:</p> <pre><code>from pyramid_capstone import th_api\n\n@th_api.get('/admin/users', permission='admin')\ndef list_users_admin(request) -&gt; list:\n    \"\"\"Only users with 'admin' permission can access this.\"\"\"\n    return get_all_users()\n\n@th_api.post('/posts', permission='create_post')\ndef create_post(request, title: str, content: str) -&gt; dict:\n    \"\"\"Only authenticated users with 'create_post' permission.\"\"\"\n    return create_new_post(title, content)\n</code></pre>"},{"location":"security/#setting-up-authentication","title":"Setting Up Authentication","text":""},{"location":"security/#1-basic-authentication-setup","title":"1. Basic Authentication Setup","text":"<p>Here's a complete example with session-based authentication:</p> <pre><code>from pyramid.config import Configurator\nfrom pyramid.authentication import SessionAuthenticationPolicy\nfrom pyramid.authorization import ACLAuthorizationPolicy\nfrom pyramid.security import Allow, Everyone, Authenticated\nfrom pyramid_capstone import th_api\n\nclass RootACL:\n    \"\"\"Root Access Control List.\"\"\"\n    __acl__ = [\n        (Allow, Everyone, 'view'),\n        (Allow, Authenticated, 'create'),\n        (Allow, 'group:admins', 'admin'),\n    ]\n\ndef main(global_config, **settings):\n    config = Configurator(\n        settings=settings,\n        root_factory=lambda request: RootACL()\n    )\n\n    # Set up authentication and authorization\n    config.set_authentication_policy(SessionAuthenticationPolicy())\n    config.set_authorization_policy(ACLAuthorizationPolicy())\n\n    # Include pyramid-capstone\n    config.include('pyramid_capstone')\n    config.scan()\n\n    return config.make_wsgi_app()\n</code></pre>"},{"location":"security/#2-jwt-authentication","title":"2. JWT Authentication","text":"<p>For API-first applications, JWT tokens are often preferred:</p> <pre><code>from pyramid_jwt import create_jwt_authentication_policy\n\ndef main(global_config, **settings):\n    config = Configurator(settings=settings)\n\n    # JWT Authentication\n    jwt_policy = create_jwt_authentication_policy(\n        private_key='your-secret-key',\n        algorithm='HS256',\n        expiration=3600,  # 1 hour\n        auth_type='Bearer'\n    )\n\n    config.set_authentication_policy(jwt_policy)\n    config.set_authorization_policy(ACLAuthorizationPolicy())\n\n    config.include('pyramid_capstone')\n    config.scan()\n\n    return config.make_wsgi_app()\n</code></pre>"},{"location":"security/#protected-endpoints","title":"Protected Endpoints","text":""},{"location":"security/#basic-permission-checking","title":"Basic Permission Checking","text":"<pre><code>@th_api.get('/profile', permission='view')\ndef get_profile(request) -&gt; dict:\n    \"\"\"Any authenticated user can view their profile.\"\"\"\n    user_id = request.authenticated_userid\n    return {\"user_id\": user_id, \"profile\": get_user_profile(user_id)}\n\n@th_api.post('/admin/users', permission='admin')\ndef create_user_admin(request, username: str, email: str) -&gt; dict:\n    \"\"\"Only admins can create users.\"\"\"\n    return create_user(username, email)\n\n@th_api.delete('/posts/{post_id}', permission='delete_post')\ndef delete_post(request, post_id: int) -&gt; dict:\n    \"\"\"Only users with delete_post permission.\"\"\"\n    delete_post_by_id(post_id)\n    return {\"message\": \"Post deleted\"}\n</code></pre>"},{"location":"security/#dynamic-permissions","title":"Dynamic Permissions","text":"<p>For more complex authorization, you can use dynamic permissions:</p> <pre><code>from pyramid.security import has_permission\n\n@th_api.get('/posts/{post_id}')\ndef get_post(request, post_id: int) -&gt; dict:\n    \"\"\"Public posts are viewable by everyone, private posts need permission.\"\"\"\n    post = get_post_by_id(post_id)\n\n    if post.is_private:\n        # Check if user has permission to view private posts\n        if not has_permission('view_private', request.context, request):\n            request.response.status = 403\n            return {\"error\": \"Access denied\"}\n\n    return post.to_dict()\n\n@th_api.put('/posts/{post_id}')\ndef update_post(request, post_id: int, title: str, content: str) -&gt; dict:\n    \"\"\"Users can only edit their own posts, unless they're admins.\"\"\"\n    post = get_post_by_id(post_id)\n    user_id = request.authenticated_userid\n\n    # Check ownership or admin permission\n    if post.author_id != user_id and not has_permission('admin', request.context, request):\n        request.response.status = 403\n        return {\"error\": \"You can only edit your own posts\"}\n\n    return update_post_content(post_id, title, content)\n</code></pre>"},{"location":"security/#authentication-endpoints","title":"Authentication Endpoints","text":"<p>Create login/logout endpoints to manage authentication:</p> <pre><code>from pyramid.security import remember, forget\nimport bcrypt\n\n# In-memory user store (use a database in production)\nUSERS = {\n    \"alice\": {\n        \"password\": bcrypt.hashpw(b\"secret123\", bcrypt.gensalt()),\n        \"groups\": [\"users\"]\n    },\n    \"admin\": {\n        \"password\": bcrypt.hashpw(b\"admin123\", bcrypt.gensalt()),\n        \"groups\": [\"users\", \"admins\"]\n    }\n}\n\n@th_api.post('/auth/login')\ndef login(request, username: str, password: str) -&gt; dict:\n    \"\"\"Authenticate user and create session.\"\"\"\n    user = USERS.get(username)\n\n    if not user or not bcrypt.checkpw(password.encode(), user[\"password\"]):\n        request.response.status = 401\n        return {\"error\": \"Invalid credentials\"}\n\n    # Create authentication headers\n    headers = remember(request, username)\n    request.response.headerlist.extend(headers)\n\n    return {\n        \"message\": \"Login successful\",\n        \"user\": username,\n        \"groups\": user[\"groups\"]\n    }\n\n@th_api.post('/auth/logout')\ndef logout(request) -&gt; dict:\n    \"\"\"Logout user and clear session.\"\"\"\n    headers = forget(request)\n    request.response.headerlist.extend(headers)\n    return {\"message\": \"Logout successful\"}\n\n@th_api.get('/auth/me', permission='view')\ndef get_current_user(request) -&gt; dict:\n    \"\"\"Get current authenticated user info.\"\"\"\n    username = request.authenticated_userid\n    user = USERS.get(username, {})\n\n    return {\n        \"username\": username,\n        \"groups\": user.get(\"groups\", [])\n    }\n</code></pre>"},{"location":"security/#advanced-security-patterns","title":"Advanced Security Patterns","text":""},{"location":"security/#role-based-access-control-rbac","title":"Role-Based Access Control (RBAC)","text":"<pre><code>from pyramid.security import Allow, Deny, Everyone, Authenticated\n\nclass BlogACL:\n    \"\"\"Access Control List for blog resources.\"\"\"\n    def __init__(self, request):\n        self.request = request\n\n    @property\n    def __acl__(self):\n        # Base permissions\n        acl = [\n            (Allow, Everyone, 'view_public'),\n            (Allow, Authenticated, 'view_private'),\n            (Allow, Authenticated, 'create_post'),\n            (Allow, 'group:moderators', 'moderate'),\n            (Allow, 'group:admins', 'admin'),\n        ]\n\n        # Dynamic permissions based on context\n        if hasattr(self, 'post_id'):\n            post = get_post_by_id(self.post_id)\n            if post:\n                # Post authors can edit their own posts\n                acl.append((Allow, f'user:{post.author_id}', 'edit_post'))\n\n        return acl\n\n# Use in configuration\ndef main(global_config, **settings):\n    config = Configurator(\n        settings=settings,\n        root_factory=BlogACL\n    )\n    # ... rest of configuration\n</code></pre>"},{"location":"security/#api-key-authentication","title":"API Key Authentication","text":"<pre><code>import secrets\nfrom pyramid.authentication import CallbackAuthenticationPolicy\n\n# API key storage (use database in production)\nAPI_KEYS = {\n    \"sk_test_123\": {\"user_id\": \"alice\", \"permissions\": [\"read\", \"write\"]},\n    \"sk_prod_456\": {\"user_id\": \"admin\", \"permissions\": [\"read\", \"write\", \"admin\"]},\n}\n\nclass APIKeyAuthenticationPolicy(CallbackAuthenticationPolicy):\n    def unauthenticated_userid(self, request):\n        \"\"\"Extract API key from Authorization header.\"\"\"\n        auth_header = request.headers.get('Authorization', '')\n        if auth_header.startswith('Bearer '):\n            return auth_header[7:]  # Remove 'Bearer ' prefix\n        return None\n\n    def callback(self, userid, request):\n        \"\"\"Validate API key and return user groups.\"\"\"\n        key_data = API_KEYS.get(userid)\n        if key_data:\n            return [f\"permission:{perm}\" for perm in key_data[\"permissions\"]]\n        return None\n\n# Protected endpoint with API key\n@th_api.get('/api/data', permission='read')\ndef get_api_data(request) -&gt; dict:\n    \"\"\"Access with: Authorization: Bearer sk_test_123\"\"\"\n    api_key = request.authenticated_userid\n    key_data = API_KEYS.get(api_key, {})\n\n    return {\n        \"data\": \"sensitive information\",\n        \"user_id\": key_data.get(\"user_id\"),\n        \"permissions\": key_data.get(\"permissions\", [])\n    }\n</code></pre>"},{"location":"security/#rate-limiting","title":"Rate Limiting","text":"<pre><code>from functools import wraps\nfrom time import time\nfrom collections import defaultdict\n\n# Simple in-memory rate limiter (use Redis in production)\nrate_limit_storage = defaultdict(list)\n\ndef rate_limit(max_requests: int = 100, window_seconds: int = 3600):\n    \"\"\"Rate limiting decorator.\"\"\"\n    def decorator(func):\n        @wraps(func)\n        def wrapper(request, *args, **kwargs):\n            # Get client identifier (IP or user ID)\n            client_id = request.authenticated_userid or request.client_addr\n            current_time = time()\n\n            # Clean old requests\n            rate_limit_storage[client_id] = [\n                req_time for req_time in rate_limit_storage[client_id]\n                if current_time - req_time &lt; window_seconds\n            ]\n\n            # Check rate limit\n            if len(rate_limit_storage[client_id]) &gt;= max_requests:\n                request.response.status = 429\n                return {\"error\": \"Rate limit exceeded\"}\n\n            # Record this request\n            rate_limit_storage[client_id].append(current_time)\n\n            return func(request, *args, **kwargs)\n        return wrapper\n    return decorator\n\n# Apply rate limiting\n@th_api.post('/api/expensive-operation', permission='create')\n@rate_limit(max_requests=10, window_seconds=3600)  # 10 requests per hour\ndef expensive_operation(request, data: str) -&gt; dict:\n    \"\"\"Rate-limited endpoint.\"\"\"\n    return perform_expensive_operation(data)\n</code></pre>"},{"location":"security/#security-best-practices","title":"Security Best Practices","text":""},{"location":"security/#1-input-validation","title":"1. Input Validation","text":"<p>Always validate and sanitize input data:</p> <pre><code>import re\nfrom html import escape\n\n@th_api.post('/posts')\ndef create_post(request, title: str, content: str, permission='create_post') -&gt; dict:\n    \"\"\"Create a post with input validation.\"\"\"\n\n    # Validate title length\n    if len(title.strip()) &lt; 3:\n        request.response.status = 400\n        return {\"error\": \"Title must be at least 3 characters\"}\n\n    if len(title) &gt; 200:\n        request.response.status = 400\n        return {\"error\": \"Title must be less than 200 characters\"}\n\n    # Sanitize HTML content\n    content = escape(content)\n\n    # Validate content\n    if len(content.strip()) &lt; 10:\n        request.response.status = 400\n        return {\"error\": \"Content must be at least 10 characters\"}\n\n    return create_new_post(title.strip(), content)\n</code></pre>"},{"location":"security/#2-cors-configuration","title":"2. CORS Configuration","text":"<p>For browser-based applications:</p> <pre><code>def main(global_config, **settings):\n    config = Configurator(settings=settings)\n\n    # CORS settings\n    config.add_settings({\n        'cors.preflight_maxage': '3600',\n        'cors.origins': 'https://yourdomain.com',\n        'cors.credentials': 'true'\n    })\n\n    config.include('pyramid_cors')\n    config.include('pyramid_capstone')\n    config.scan()\n\n    return config.make_wsgi_app()\n</code></pre>"},{"location":"security/#3-https-enforcement","title":"3. HTTPS Enforcement","text":"<pre><code>from pyramid.events import NewRequest\n\ndef require_https(event):\n    \"\"\"Redirect HTTP requests to HTTPS.\"\"\"\n    request = event.request\n    if request.scheme != 'https' and not request.registry.settings.get('debug'):\n        raise HTTPSRequired()\n\ndef main(global_config, **settings):\n    config = Configurator(settings=settings)\n\n    # Enforce HTTPS in production\n    if not settings.get('debug'):\n        config.add_subscriber(require_https, NewRequest)\n\n    # ... rest of configuration\n</code></pre>"},{"location":"security/#4-security-headers","title":"4. Security Headers","text":"<pre><code>from pyramid.events import NewResponse\n\ndef add_security_headers(event):\n    \"\"\"Add security headers to all responses.\"\"\"\n    response = event.response\n    response.headers.update({\n        'X-Content-Type-Options': 'nosniff',\n        'X-Frame-Options': 'DENY',\n        'X-XSS-Protection': '1; mode=block',\n        'Strict-Transport-Security': 'max-age=31536000; includeSubDomains',\n        'Content-Security-Policy': \"default-src 'self'\"\n    })\n\ndef main(global_config, **settings):\n    config = Configurator(settings=settings)\n    config.add_subscriber(add_security_headers, NewResponse)\n    # ... rest of configuration\n</code></pre>"},{"location":"security/#testing-secured-endpoints","title":"Testing Secured Endpoints","text":"<p>Test your secured endpoints properly:</p> <pre><code>import pytest\nfrom pyramid.testing import DummyRequest\nfrom pyramid.security import remember\n\ndef test_protected_endpoint_requires_auth(pyramid_config):\n    \"\"\"Test that protected endpoints require authentication.\"\"\"\n    request = DummyRequest()\n\n    # Should fail without authentication\n    response = get_profile(request)\n    assert request.response.status_int == 403\n\ndef test_protected_endpoint_with_auth(pyramid_config):\n    \"\"\"Test protected endpoint with valid authentication.\"\"\"\n    request = DummyRequest()\n\n    # Simulate authenticated user\n    request.authenticated_userid = 'alice'\n\n    response = get_profile(request)\n    assert response['user_id'] == 'alice'\n\ndef test_admin_endpoint_requires_admin_permission(pyramid_config):\n    \"\"\"Test that admin endpoints require admin permission.\"\"\"\n    request = DummyRequest()\n    request.authenticated_userid = 'regular_user'\n\n    # Mock has_permission to return False for non-admin\n    with patch('pyramid.security.has_permission', return_value=False):\n        response = create_user_admin(request, 'newuser', 'new@example.com')\n        assert request.response.status_int == 403\n</code></pre>"},{"location":"security/#common-security-patterns","title":"Common Security Patterns","text":""},{"location":"security/#resource-based-permissions","title":"Resource-Based Permissions","text":"<pre><code>@th_api.get('/posts/{post_id}', permission='view_post')\ndef get_post(request, post_id: int) -&gt; dict:\n    \"\"\"Permission is checked against the specific post resource.\"\"\"\n    # Pyramid will check 'view_post' permission against the post context\n    pass\n\n@th_api.put('/posts/{post_id}', permission='edit_post')\ndef update_post(request, post_id: int, title: str) -&gt; dict:\n    \"\"\"Only users who can edit this specific post.\"\"\"\n    pass\n</code></pre>"},{"location":"security/#conditional-security","title":"Conditional Security","text":"<pre><code>@th_api.get('/posts/{post_id}')\ndef get_post_conditional(request, post_id: int) -&gt; dict:\n    \"\"\"Apply security conditionally based on post visibility.\"\"\"\n    post = get_post_by_id(post_id)\n\n    if post.is_private:\n        # Check authentication for private posts\n        if not request.authenticated_userid:\n            request.response.status = 401\n            return {\"error\": \"Authentication required\"}\n\n        # Check if user can view this private post\n        if not can_view_private_post(request.authenticated_userid, post):\n            request.response.status = 403\n            return {\"error\": \"Access denied\"}\n\n    return post.to_dict()\n</code></pre> <p>Security is a crucial aspect of API development. The <code>pyramid-capstone</code> library makes it easy to integrate with Pyramid's robust security system while maintaining clean, readable code.</p> <p>For more examples of security implementations, see our Examples guide.</p>"},{"location":"tutorial/","title":"Tutorial: Building a Task Management API","text":"<p>In this tutorial, we'll build a complete task management API that demonstrates all the key features of <code>pyramid-capstone</code>. You'll learn about parameter handling, validation, error handling, and more.</p>"},{"location":"tutorial/#what-well-build","title":"What We'll Build","text":"<p>A task management API with the following features:</p> <ul> <li>\u2705 Create, read, update, and delete tasks</li> <li>\ud83c\udff7\ufe0f Task categories and priorities  </li> <li>\ud83d\udc64 User assignment</li> <li>\ud83d\udd0d Filtering and pagination</li> <li>\u2728 Automatic validation and documentation</li> </ul>"},{"location":"tutorial/#step-1-project-setup","title":"Step 1: Project Setup","text":"<p>Create a new directory and set up the basic structure:</p> <pre><code>mkdir task-api\ncd task-api\n</code></pre> <p>Create <code>pyproject.toml</code>:</p> <pre><code>[tool.poetry]\nname = \"task-api\"\nversion = \"0.1.0\"\ndescription = \"Task management API example\"\nauthors = [\"Your Name &lt;your.email@example.com&gt;\"]\n\n[tool.poetry.dependencies]\npython = \"^3.8\"\npyramid-capstone = \"^0.1.0\"\nwaitress = \"^2.1.0\"\n\n[build-system]\nrequires = [\"poetry-core\"]\nbuild-backend = \"poetry.core.masonry.api\"\n</code></pre> <p>Install dependencies:</p> <pre><code>poetry install\n</code></pre>"},{"location":"tutorial/#step-2-define-data-models","title":"Step 2: Define Data Models","text":"<p>Create <code>models.py</code> to define our data structures:</p> <pre><code>from dataclasses import dataclass, field\nfrom datetime import datetime\nfrom enum import Enum\nfrom typing import Optional, List\nfrom uuid import uuid4\n\nclass Priority(Enum):\n    LOW = \"low\"\n    MEDIUM = \"medium\" \n    HIGH = \"high\"\n    URGENT = \"urgent\"\n\nclass TaskStatus(Enum):\n    TODO = \"todo\"\n    IN_PROGRESS = \"in_progress\"\n    DONE = \"done\"\n\n@dataclass\nclass User:\n    id: str = field(default_factory=lambda: str(uuid4()))\n    name: str = \"\"\n    email: str = \"\"\n    created_at: datetime = field(default_factory=datetime.now)\n\n@dataclass  \nclass Category:\n    id: str = field(default_factory=lambda: str(uuid4()))\n    name: str = \"\"\n    description: Optional[str] = None\n    color: str = \"#007bff\"\n\n@dataclass\nclass Task:\n    id: str = field(default_factory=lambda: str(uuid4()))\n    title: str = \"\"\n    description: Optional[str] = None\n    status: TaskStatus = TaskStatus.TODO\n    priority: Priority = Priority.MEDIUM\n    assignee_id: Optional[str] = None\n    category_id: Optional[str] = None\n    due_date: Optional[datetime] = None\n    created_at: datetime = field(default_factory=datetime.now)\n    updated_at: datetime = field(default_factory=datetime.now)\n\n# Response models for API\n@dataclass\nclass TaskResponse:\n    \"\"\"Task with populated assignee and category information.\"\"\"\n    id: str\n    title: str\n    description: Optional[str]\n    status: TaskStatus\n    priority: Priority\n    assignee: Optional[User]\n    category: Optional[Category]\n    due_date: Optional[datetime]\n    created_at: datetime\n    updated_at: datetime\n\n@dataclass\nclass TaskListResponse:\n    \"\"\"Paginated list of tasks.\"\"\"\n    tasks: List[TaskResponse]\n    total: int\n    page: int\n    per_page: int\n    has_next: bool\n    has_prev: bool\n</code></pre>"},{"location":"tutorial/#step-3-create-data-storage","title":"Step 3: Create Data Storage","text":"<p>Create <code>storage.py</code> for in-memory data storage:</p> <pre><code>from typing import Dict, List, Optional\nfrom datetime import datetime, timedelta\nfrom .models import Task, User, Category, TaskStatus, Priority\n\nclass TaskStorage:\n    def __init__(self):\n        self.tasks: Dict[str, Task] = {}\n        self.users: Dict[str, User] = {}\n        self.categories: Dict[str, Category] = {}\n        self._init_sample_data()\n\n    def _init_sample_data(self):\n        \"\"\"Initialize with some sample data.\"\"\"\n        # Create sample users\n        user1 = User(name=\"Alice Johnson\", email=\"alice@example.com\")\n        user2 = User(name=\"Bob Smith\", email=\"bob@example.com\")\n        self.users[user1.id] = user1\n        self.users[user2.id] = user2\n\n        # Create sample categories\n        cat1 = Category(name=\"Work\", description=\"Work-related tasks\", color=\"#dc3545\")\n        cat2 = Category(name=\"Personal\", description=\"Personal tasks\", color=\"#28a745\")\n        self.categories[cat1.id] = cat1\n        self.categories[cat2.id] = cat2\n\n        # Create sample tasks\n        task1 = Task(\n            title=\"Complete project proposal\",\n            description=\"Write and review the Q4 project proposal\",\n            priority=Priority.HIGH,\n            assignee_id=user1.id,\n            category_id=cat1.id,\n            due_date=datetime.now() + timedelta(days=3)\n        )\n        task2 = Task(\n            title=\"Buy groceries\",\n            description=\"Milk, bread, eggs, vegetables\",\n            priority=Priority.MEDIUM,\n            assignee_id=user2.id,\n            category_id=cat2.id,\n            status=TaskStatus.TODO\n        )\n        self.tasks[task1.id] = task1\n        self.tasks[task2.id] = task2\n\n    # Task operations\n    def get_task(self, task_id: str) -&gt; Optional[Task]:\n        return self.tasks.get(task_id)\n\n    def create_task(self, task: Task) -&gt; Task:\n        task.created_at = datetime.now()\n        task.updated_at = datetime.now()\n        self.tasks[task.id] = task\n        return task\n\n    def update_task(self, task_id: str, updates: dict) -&gt; Optional[Task]:\n        task = self.tasks.get(task_id)\n        if not task:\n            return None\n\n        for key, value in updates.items():\n            if hasattr(task, key):\n                setattr(task, key, value)\n        task.updated_at = datetime.now()\n        return task\n\n    def delete_task(self, task_id: str) -&gt; bool:\n        return self.tasks.pop(task_id, None) is not None\n\n    def list_tasks(self, status: Optional[TaskStatus] = None,\n                   priority: Optional[Priority] = None,\n                   assignee_id: Optional[str] = None,\n                   category_id: Optional[str] = None,\n                   page: int = 1, per_page: int = 10) -&gt; tuple:\n        \"\"\"List tasks with filtering and pagination.\"\"\"\n        tasks = list(self.tasks.values())\n\n        # Apply filters\n        if status:\n            tasks = [t for t in tasks if t.status == status]\n        if priority:\n            tasks = [t for t in tasks if t.priority == priority]\n        if assignee_id:\n            tasks = [t for t in tasks if t.assignee_id == assignee_id]\n        if category_id:\n            tasks = [t for t in tasks if t.category_id == category_id]\n\n        # Sort by created_at descending\n        tasks.sort(key=lambda t: t.created_at, reverse=True)\n\n        # Pagination\n        total = len(tasks)\n        start = (page - 1) * per_page\n        end = start + per_page\n        page_tasks = tasks[start:end]\n\n        return page_tasks, total\n\n    # User operations\n    def get_user(self, user_id: str) -&gt; Optional[User]:\n        return self.users.get(user_id)\n\n    def list_users(self) -&gt; List[User]:\n        return list(self.users.values())\n\n    # Category operations\n    def get_category(self, category_id: str) -&gt; Optional[Category]:\n        return self.categories.get(category_id)\n\n    def list_categories(self) -&gt; List[Category]:\n        return list(self.categories.values())\n\n# Global storage instance\nstorage = TaskStorage()\n</code></pre>"},{"location":"tutorial/#step-4-build-the-api-endpoints","title":"Step 4: Build the API Endpoints","text":"<p>Create <code>views.py</code> with our API endpoints:</p> <pre><code>from typing import Optional, List\nfrom pyramid.request import Request\nfrom pyramid_capstone import th_api\nfrom .models import (\n    Task, TaskResponse, TaskListResponse, TaskStatus, Priority,\n    User, Category\n)\nfrom .storage import storage\n\n# Helper function to build task response with populated relationships\ndef build_task_response(task: Task) -&gt; TaskResponse:\n    \"\"\"Convert Task to TaskResponse with populated relationships.\"\"\"\n    assignee = storage.get_user(task.assignee_id) if task.assignee_id else None\n    category = storage.get_category(task.category_id) if task.category_id else None\n\n    return TaskResponse(\n        id=task.id,\n        title=task.title,\n        description=task.description,\n        status=task.status,\n        priority=task.priority,\n        assignee=assignee,\n        category=category,\n        due_date=task.due_date,\n        created_at=task.created_at,\n        updated_at=task.updated_at\n    )\n\n# Task endpoints\n@th_api.get('/tasks')\ndef list_tasks(request: Request,\n               status: Optional[str] = None,\n               priority: Optional[str] = None,\n               assignee_id: Optional[str] = None,\n               category_id: Optional[str] = None,\n               page: int = 1,\n               per_page: int = 10) -&gt; TaskListResponse:\n    \"\"\"List tasks with optional filtering and pagination.\"\"\"\n\n    # Convert string enums to enum objects\n    status_enum = TaskStatus(status) if status else None\n    priority_enum = Priority(priority) if priority else None\n\n    # Validate pagination parameters\n    if page &lt; 1:\n        page = 1\n    if per_page &lt; 1 or per_page &gt; 100:\n        per_page = 10\n\n    tasks, total = storage.list_tasks(\n        status=status_enum,\n        priority=priority_enum,\n        assignee_id=assignee_id,\n        category_id=category_id,\n        page=page,\n        per_page=per_page\n    )\n\n    # Build response objects\n    task_responses = [build_task_response(task) for task in tasks]\n\n    return TaskListResponse(\n        tasks=task_responses,\n        total=total,\n        page=page,\n        per_page=per_page,\n        has_next=(page * per_page) &lt; total,\n        has_prev=page &gt; 1\n    )\n\n@th_api.get('/tasks/{task_id}')\ndef get_task(request: Request, task_id: str) -&gt; TaskResponse:\n    \"\"\"Get a specific task by ID.\"\"\"\n    task = storage.get_task(task_id)\n    if not task:\n        request.response.status = 404\n        return {\"error\": \"Task not found\"}\n\n    return build_task_response(task)\n\n@th_api.post('/tasks')\ndef create_task(request: Request,\n                title: str,\n                description: Optional[str] = None,\n                priority: str = \"medium\",\n                assignee_id: Optional[str] = None,\n                category_id: Optional[str] = None) -&gt; TaskResponse:\n    \"\"\"Create a new task.\"\"\"\n\n    # Validate priority\n    try:\n        priority_enum = Priority(priority)\n    except ValueError:\n        request.response.status = 400\n        return {\"error\": f\"Invalid priority. Must be one of: {[p.value for p in Priority]}\"}\n\n    # Validate assignee exists\n    if assignee_id and not storage.get_user(assignee_id):\n        request.response.status = 400\n        return {\"error\": \"Assignee not found\"}\n\n    # Validate category exists\n    if category_id and not storage.get_category(category_id):\n        request.response.status = 400\n        return {\"error\": \"Category not found\"}\n\n    # Create task\n    task = Task(\n        title=title,\n        description=description,\n        priority=priority_enum,\n        assignee_id=assignee_id,\n        category_id=category_id\n    )\n\n    created_task = storage.create_task(task)\n    request.response.status = 201\n    return build_task_response(created_task)\n\n@th_api.put('/tasks/{task_id}')\ndef update_task(request: Request,\n                task_id: str,\n                title: Optional[str] = None,\n                description: Optional[str] = None,\n                status: Optional[str] = None,\n                priority: Optional[str] = None,\n                assignee_id: Optional[str] = None,\n                category_id: Optional[str] = None) -&gt; TaskResponse:\n    \"\"\"Update an existing task.\"\"\"\n\n    task = storage.get_task(task_id)\n    if not task:\n        request.response.status = 404\n        return {\"error\": \"Task not found\"}\n\n    updates = {}\n\n    # Build updates dict with validation\n    if title is not None:\n        updates['title'] = title\n    if description is not None:\n        updates['description'] = description\n    if status is not None:\n        try:\n            updates['status'] = TaskStatus(status)\n        except ValueError:\n            request.response.status = 400\n            return {\"error\": f\"Invalid status. Must be one of: {[s.value for s in TaskStatus]}\"}\n    if priority is not None:\n        try:\n            updates['priority'] = Priority(priority)\n        except ValueError:\n            request.response.status = 400\n            return {\"error\": f\"Invalid priority. Must be one of: {[p.value for p in Priority]}\"}\n    if assignee_id is not None:\n        if assignee_id and not storage.get_user(assignee_id):\n            request.response.status = 400\n            return {\"error\": \"Assignee not found\"}\n        updates['assignee_id'] = assignee_id\n    if category_id is not None:\n        if category_id and not storage.get_category(category_id):\n            request.response.status = 400\n            return {\"error\": \"Category not found\"}\n        updates['category_id'] = category_id\n\n    updated_task = storage.update_task(task_id, updates)\n    return build_task_response(updated_task)\n\n@th_api.delete('/tasks/{task_id}')\ndef delete_task(request: Request, task_id: str) -&gt; dict:\n    \"\"\"Delete a task.\"\"\"\n    if not storage.delete_task(task_id):\n        request.response.status = 404\n        return {\"error\": \"Task not found\"}\n\n    return {\"message\": \"Task deleted successfully\"}\n\n# User endpoints\n@th_api.get('/users')\ndef list_users(request: Request) -&gt; List[User]:\n    \"\"\"List all users.\"\"\"\n    return storage.list_users()\n\n@th_api.get('/users/{user_id}')\ndef get_user(request: Request, user_id: str) -&gt; User:\n    \"\"\"Get a specific user by ID.\"\"\"\n    user = storage.get_user(user_id)\n    if not user:\n        request.response.status = 404\n        return {\"error\": \"User not found\"}\n    return user\n\n# Category endpoints\n@th_api.get('/categories')\ndef list_categories(request: Request) -&gt; List[Category]:\n    \"\"\"List all categories.\"\"\"\n    return storage.list_categories()\n\n@th_api.get('/categories/{category_id}')\ndef get_category(request: Request, category_id: str) -&gt; Category:\n    \"\"\"Get a specific category by ID.\"\"\"\n    category = storage.get_category(category_id)\n    if not category:\n        request.response.status = 404\n        return {\"error\": \"Category not found\"}\n    return category\n\n# Health check\n@th_api.get('/health')\ndef health_check(request: Request) -&gt; dict:\n    \"\"\"API health check.\"\"\"\n    return {\n        \"status\": \"healthy\",\n        \"tasks_count\": len(storage.tasks),\n        \"users_count\": len(storage.users),\n        \"categories_count\": len(storage.categories)\n    }\n</code></pre>"},{"location":"tutorial/#step-5-create-the-application","title":"Step 5: Create the Application","text":"<p>Create <code>app.py</code>:</p> <pre><code>from pyramid.config import Configurator\n\ndef main(global_config, **settings):\n    \"\"\"Create and configure the Pyramid application.\"\"\"\n    config = Configurator(settings=settings)\n\n    # Include pyramid-capstone\n    config.include('pyramid_capstone')\n\n    # Scan for decorated views\n    config.scan()\n\n    return config.make_wsgi_app()\n\nif __name__ == '__main__':\n    from wsgiref.simple_server import make_server\n    app = main({})\n    server = make_server('0.0.0.0', 6543, app)\n    print(\"Task API running on http://localhost:6543\")\n    print(\"Try: curl http://localhost:6543/health\")\n    server.serve_forever()\n</code></pre>"},{"location":"tutorial/#step-6-test-your-api","title":"Step 6: Test Your API","text":"<p>Run the application:</p> <pre><code>python app.py\n</code></pre> <p>Now test the endpoints:</p>"},{"location":"tutorial/#health-check","title":"Health Check","text":"<pre><code>curl http://localhost:6543/health\n</code></pre>"},{"location":"tutorial/#list-tasks","title":"List Tasks","text":"<pre><code># All tasks\ncurl http://localhost:6543/tasks\n\n# Filter by status\ncurl \"http://localhost:6543/tasks?status=todo\"\n\n# Filter by priority\ncurl \"http://localhost:6543/tasks?priority=high\"\n\n# Pagination\ncurl \"http://localhost:6543/tasks?page=1&amp;per_page=5\"\n</code></pre>"},{"location":"tutorial/#create-a-task","title":"Create a Task","text":"<pre><code>curl -X POST http://localhost:6543/tasks \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"title\": \"Learn pyramid-capstone\",\n    \"description\": \"Complete the tutorial and build an API\",\n    \"priority\": \"high\"\n  }'\n</code></pre>"},{"location":"tutorial/#update-a-task","title":"Update a Task","text":"<pre><code># First get a task ID from the list, then:\ncurl -X PUT http://localhost:6543/tasks/{task_id} \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"status\": \"in_progress\",\n    \"priority\": \"urgent\"\n  }'\n</code></pre>"},{"location":"tutorial/#get-users-and-categories","title":"Get Users and Categories","text":"<pre><code>curl http://localhost:6543/users\ncurl http://localhost:6543/categories\n</code></pre>"},{"location":"tutorial/#what-youve-learned","title":"What You've Learned","text":"<p>Congratulations! You've built a complete API that demonstrates:</p>"},{"location":"tutorial/#parameter-handling","title":"\ud83d\udd0d Parameter Handling","text":"<ul> <li>Path parameters (<code>task_id</code>)</li> <li>Query parameters with defaults (<code>page=1</code>, <code>per_page=10</code>)</li> <li>Optional parameters (<code>description</code>, <code>assignee_id</code>)</li> <li>JSON body parameters with validation</li> </ul>"},{"location":"tutorial/#automatic-validation","title":"\u2705 Automatic Validation","text":"<ul> <li>Type conversion (strings to integers for pagination)</li> <li>Required vs optional parameters</li> <li>Enum validation for status and priority</li> <li>Custom validation logic with proper error responses</li> </ul>"},{"location":"tutorial/#complex-data-structures","title":"\ud83d\udcca Complex Data Structures","text":"<ul> <li>Dataclasses for clean data models</li> <li>Nested objects (tasks with assignee and category info)</li> <li>Lists and pagination responses</li> <li>Enum types for controlled values</li> </ul>"},{"location":"tutorial/#real-world-patterns","title":"\ud83d\udee0\ufe0f Real-World Patterns","text":"<ul> <li>CRUD operations (Create, Read, Update, Delete)</li> <li>Filtering and pagination</li> <li>Relationship handling</li> <li>Error handling with appropriate HTTP status codes</li> </ul>"},{"location":"tutorial/#next-steps","title":"Next Steps","text":"<p>Now that you understand the basics, you might want to:</p> <ul> <li>Add Security - Protect your endpoints with authentication</li> <li>Explore Examples - See more advanced use cases</li> </ul>"},{"location":"tutorial/#advanced-features-preview","title":"Advanced Features Preview","text":"<p>Here are some advanced features you can explore:</p>"},{"location":"tutorial/#custom-validation","title":"Custom Validation","text":"<pre><code>@th_api.post('/tasks')\ndef create_task(request: Request, title: str, due_date: str) -&gt; TaskResponse:\n    # Custom date validation\n    try:\n        due_date_obj = datetime.fromisoformat(due_date)\n        if due_date_obj &lt; datetime.now():\n            request.response.status = 400\n            return {\"error\": \"Due date must be in the future\"}\n    except ValueError:\n        request.response.status = 400\n        return {\"error\": \"Invalid date format. Use ISO format: YYYY-MM-DD\"}\n</code></pre>"},{"location":"tutorial/#nested-objects","title":"Nested Objects","text":"<pre><code>from dataclasses import dataclass\n\n@dataclass\nclass TaskWithComments:\n    task: Task\n    comments: List[str]\n\n@th_api.get('/tasks/{task_id}/full')\ndef get_task_with_comments(request: Request, task_id: str) -&gt; TaskWithComments:\n    # Return complex nested structures\n    pass\n</code></pre>"},{"location":"tutorial/#file-uploads","title":"File Uploads","text":"<pre><code>@th_api.post('/tasks/{task_id}/attachments')\ndef upload_attachment(request: Request, task_id: str) -&gt; dict:\n    # Handle file uploads through request.POST\n    upload = request.POST.get('file')\n    if upload:\n        # Process the uploaded file\n        pass\n</code></pre> <p>Ready to explore more patterns? Check out our Examples guide!</p>"}]}